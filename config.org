* EMACS config.org

** Package Management

*** Install straight.el
#+BEGIN_SRC emacs-lisp :results none
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
#+END_SRC

*** use-package setup
#+BEGIN_SRC emacs-lisp  :results none
;; Install use-package
(straight-use-package 'use-package)

;; Configure use-package to use straight.el by default
(use-package straight
  :custom (straight-use-package-by-default t))
#+END_SRC

** Visual Experience

*** Theme
#+BEGIN_SRC emacs-lisp
(defun true-color-p ()
  ;; always true colors
  1)

(defun styling/load-theme (frame)
  ;; set theme
  (select-frame frame)
  (load-theme 'zenburn t))

(use-package zenburn-theme
  :config
  (load-theme 'zenburn t))

(add-hook 'after-make-frame-functions #'styling/load-theme)
#+END_SRC

*** Set utf-8 encoding
#+BEGIN_SRC emacs-lisp :results none
(setq locale-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(prefer-coding-system 'utf-8)
#+END_SRC

*** Set fonts
 #+BEGIN_SRC emacs-lisp :results none
 ;; font size
 (defun styling/set-fonts()
   ;; main font
   (when (member "DejaVu Sans Mono" (font-family-list))
     (set-frame-font "DejaVu Sans Mono" t t))

   ;; emoji font
   (when (member "Noto Emoji" (font-family-list))
     (set-fontset-font t nil "Noto Emoji"))

   ;; japanese font
   (when (member "VL Gothic" (font-family-list))
     (set-fontset-font t 'kana "VL Gothic")
     (set-fontset-font t 'han  "VL Gothic")))

 (add-hook 'after-init-hook 'styling/set-fonts)
 (add-hook 'server-after-make-frame-hook 'styling/set-fonts)

 (use-package emojify
   :hook (after-init . global-emojify-mode))
 #+END_SRC

*** Disable some ui features
#+BEGIN_SRC emacs-lisp :results none
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
#+END_SRC

*** Enable line numbering during text editing
#+BEGIN_SRC emacs-lisp :results none
(add-hook 'prog-mode-hook 'display-line-numbers-mode)
(add-hook 'text-mode-hook 'display-line-numbers-mode)

(add-hook 'prog-mode-hook 'display-fill-column-indicator-mode)
#+END_SRC

*** Input methods
#+BEGIN_SRC emacs-lisp :results none
(setq default-input-method "russian-computer")
#+END_SRC

*** Line wrapping
#+BEGIN_SRC emacs-lisp :results none
(setq-default fill-column 80)
(setq-default word-wrap t)
#+END_SRC

*** Highlight current line
#+BEGIN_SRC emacs-lisp :results none
(global-hl-line-mode t)
#+END_SRC

*** Scroll conservatively
#+BEGIN_SRC emacs-lisp :results none
(setq scroll-conservatively 100)
#+END_SRC

** Quality Of Life

*** diminish
#+BEGIN_SRC emacs-lisp :results none
(use-package diminish)
#+END_SRC

*** Aliases
 #+BEGIN_SRC emacs-lisp :results none
 (defalias 'yes-or-no-p 'y-or-n-p) ; y or n is enough
 (defalias 'list-buffers 'ibuffer) ; always use ibuffer
 #+END_SRC

*** Indentation
#+BEGIN_SRC emacs-lisp :results none
;; Disable electric-indent mode.
(electric-indent-mode 1)
;(add-hook 'electric-indent-mode-hook
;					(lambda ()
;						(define-key global-map (kbd "C-j") nil)))
;(add-hook 'after-change-major-mode-hook (lambda() (electric-indent-mode -1)))

(setq-default tab-width 2)
(setq-default standard-indent 2)
(setq-default indent-tabs-mode nil) ; disable tabs
#+END_SRC

*** which-key setup
#+BEGIN_SRC emacs-lisp :results none
(use-package which-key
  :config
  (which-key-mode)
  (diminish 'which-key-mode))
#+END_SRC

** Files

*** Display dired dir size
#+BEGIN_SRC emacs-lisp
(defun dired-get-size ()
  (interactive)
  (let ((files (dired-get-marked-files)))
    (with-temp-buffer
      (apply 'call-process "/usr/bin/du" nil t nil "-sch" files)
      (message "Size of all marked files: %s"
	       (progn 
		 (re-search-backward "\\(^[0-9.,]+[A-Za-z]+\\).*total$")
		 (match-string 1))))))

(require 'dired)
(define-key dired-mode-map (kbd "?") 'dired-get-size)
#+END_SRC

*** Dired openwith setup
 #+BEGIN_SRC emacs-lisp
 (use-package openwith
   :config
   (setq openwith-associations (list
				(list (openwith-make-extension-regexp
				       '("m4v" "mp4" "MP4" "MTS" "mpg" "mov" "avi" "AVI" "flv" "mkv" "webm"))
				      "mpv"
				      '(file))
				(list (openwith-make-extension-regexp
				       '("mp3" "ogg"))
				      "mpv"
				      '(file))
				(list (openwith-make-extension-regexp
				       '("pdf"))
				      "zathura"
				      '(file))
				(list (openwith-make-extension-regexp
				       '("xls" "xlsx"))
				      "libreoffice --calc"
				      '(file))
				(list (openwith-make-extension-regexp
				       '("doc" "docx" "odt"))
				      "libreoffice --writer"
				      '(file))))
   (openwith-mode 1))
 #+END_SRC

*** Files backups
#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist
      `((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms
      `((".*" ,temporary-file-directory t)))
#+END_SRC

** Coding

*** lsp-mode
#+BEGIN_SRC emacs-lisp :results none
; lsp-mode yasnippet lsp-treemacs helm-lsp projectile hydra flycheck company avy which-key helm-xref dap-mode zenburn-theme json-mode
(use-package json-mode)

(use-package flycheck
  :init (global-flycheck-mode))

(use-package tree-sitter
  :config
  (global-tree-sitter-mode)
  (diminish 'tree-sitter-mode)
  (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode))
(use-package tree-sitter-langs)

(use-package lsp-mode
  :init
  (setq lsp-keymap-prefix "C-c l")
  :config
  (diminish 'lsp-mode)
  (diminish 'eldoc-mode)
  (setq gc-cons-threshold (* 100 1024 1024)
        read-process-output-max (* 1024 1024)
        create-lockfiles nil)
  (setq lsp-javascript-format-enable nil
        lsp-javascript-suggestion-actions-enabled nil
        lsp-javascript-validate-enable nil)
  (with-eval-after-load 'js
    (define-key js-mode-map (kbd "M-.") nil))
  :hook (
         (prog-mode . lsp)
         (lsp-mode . lsp-enable-which-key-integration))
  :commands lsp)

(use-package dap-mode
  :config
  (with-eval-after-load 'lsp-mode
    (require 'dap-chrome)))

(use-package lsp-ui
  :config
  (setq lsp-ui-sideline-show-code-actions nil
        lsp-ui-sideline-show-diagnostics t
        lsp-ui-sideline-show-hover t
        lsp-ui-sideline-update-mode 'line
        lsp-ui-sideline-delay 0.1)
  :commands lsp-ui-mode)

(use-package helm-lsp
  :commands helm-lsp-workspace-symbol)
#+END_SRC
		
*** helm-mode
#+BEGIN_SRC emacs-lisp :results none
(use-package helm
	:config
	(use-package helm-xref)
	(require 'helm-xref)
	(global-set-key (kbd "M-x") 'helm-M-x)
	(global-set-key (kbd "C-x C-f") 'helm-find-files)
	(helm-mode 1)
  (diminish 'helm-mode))
#+END_SRC

*** js-mode
#+BEGIN_SRC emacs-lisp :results none
(setq js-indent-level 2)
#+END_SRC

*** sql-mode
#+BEGIN_SRC emacs-lisp :results none
(add-hook 'sql-mode-hook (lambda ()
													 (setq indent-tabs-mode nil)
													 (setq tab-width 2)))

(add-hook 'conf-space-mode-hook (lambda()
														(setq indent-tabs-mode nill)))
#+END_SRC

*** lammps-mode setup
#+BEGIN_SRC emacs-lisp :results none
(use-package lammps-mode
  :mode (
	 ("\\.in\\'" . lammps-mode)
	 ("\\.lmp\\'" . lammps-mode)))
#+END_SRC

*** company setup
#+BEGIN_SRC emacs-lisp :results none
(use-package company
  :config
	(setq company-idle-delay 0.0
        company-minimum-prefix-length 1)
  (global-company-mode t)
  (diminish 'company-mode))
#+END_SRC

*** web-dev
#+BEGIN_SRC emacs-lisp :results none
(defun my/webmode-hook ()
	"Webmode hooks."
	(setq web-mode-enable-comment-annotation t)
	(setq web-mode-markup-indent-offset 2)
	(setq web-mode-code-indent-offset 2)
	(setq web-mode-css-indent-offset 2)
	(setq web-mode-attr-indent-offset 0)
	(setq web-mode-enable-auto-indentation t)
	(setq web-mode-enable-auto-closing t)
	(setq web-mode-enable-auto-pairing t)
	(setq web-mode-enable-css-colorization t)
)
(setq css-indent-offset 2)
;(use-package web-mode
;  :mode (
;   ("\\.jsx?\\'" . web-mode)
;	 ("\\.tsx?\\'" . web-mode)
;	 ("\\.html\\'" . web-mode)
;	 ("\\.py\\'" . web-mode)
;	 ("\\.css\\'" . web-mode))
;	:config
;	(setq web-mode-content-types-alist '(("jsx" . "\\.js[x]?\\'")))
;  :commands web-mode
;	:hook (web-mode . my/webmode-hook))

(use-package emmet-mode
  :config
  (diminish 'emmet-mode)
  (add-hook 'js-mode-hook 'emmet-mode)
  (add-hook 'mhtml-mode 'emmet-mode))
#+END_SRC

*** python-mode setup
#+BEGIN_SRC emacs-lisp :results none
(use-package pyvenv
  :config
  (setq pyvenv-workon "emacs")  ; Default venv
  (pyvenv-tracking-mode 1))
#+END_SRC

*** java-mode setup
#+BEGIN_SRC emacs-lisp :results none
		(show-paren-mode 1)

		(add-hook 'java-mode-hook (lambda ()
							(setq c-basic-offset 2)
							(setq indent-tabs-mode nil)))
#+END_SRC

*** yaml-mode setup
#+BEGIN_SRC emacs-lisp :results none
(use-package yaml-mode
  :config
  (add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode)))
#+END_SRC

*** MAGIT
#+BEGIN_SRC emacs-lisp
(use-package magit)
#+END_SRC

** Text editing

*** Spelling
#+BEGIN_SRC emacs-lisp :results none
(use-package ispell
  :config
  (setq ispell-program-name "hunspell")
  (ispell-set-spellchecker-params) ;; ispell initialization, a mandatory call
  (ispell-hunspell-add-multi-dic "en-GB,ru")
  (ispell-change-dictionary "en-GB,ru" t))

(use-package flyspell
  :config
  (add-hook 'latex-mode-hook
	    (lambda () (flyspell-mode 1))))
#+END_SRC

** org-mode setup
#+BEGIN_SRC emacs-lisp results: none
;; Disable anoying org mode code blocks indentation.
(setq org-edit-src-content-indentation 0)

(define-key org-mode-map (kbd "C-c C-'") 'org-edit-src-code)
#+END_SRC

** Email
#+BEGIN_SRC emacs-lisp :results none
(autoload 'notmuch "notmuch" "notmuch mail" t)
#+END_SRC
